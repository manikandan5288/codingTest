toString() can be used to avoid the hexadecimal address, so to overcome this problem you need to override toString() then you will get original text format of data.


What is the need to Override Hashcode() and equals() method ?

JVM assigns unique hashcode value to each object when they are created in memory 
and if developers don’t override the hashcode method then there is no way the two object
 returns same hashcode value.

hashCode() :

If you only override hash-code method nothing will happen. Because it always return new hash-code for each object as an Object class.

equals() :

If you only override equal method, a.equals(b) is true it means the hash-code of a and b must be same but not happen. Because you did not override hash-code method.

Note : hash-code() method of Object class always return new hash-code for each object.

So when you need to use your object in the hashing based collection, must override both equals() and hash-code().

When we try to insert any key in HashMap first it checks whether
 any other object present with same hashcode and if yes then it checks for the equals() method. 
If two objects are same then HashMap will not add that key instead it will replace the old value by new one.

What will happen if I don’t override the hashcode method?
Ans : If the object does not implement hashcode() method and used as key then we will not get the object back 


Hashing retrieval is a two-step process.

Find the right bucket (using hashCode())
Search the bucket for the right element (using equals() )

What is the need to Override Hashcode() and equals() method
Although there are lots of materials are available on internet and API document about the necessity of the overriding the hashcode() and equals() method in Java but lots of new developers still not able to understand the necessity of hashcode() method.
In this article, I will try to explain step by step the need of overriding hashcode() method in Java.

Few Thump rules:

If two objects are same then they must return same value in hashcode() and equals() method whenever invoked.
It is not necessary that two different object must have different hashcode values. it might be possible that they share common hash bucket.
JVM assigns unique hashcode value to each object when they are created in memory and if developers don’t override the hashcode method then there is no way the two object returns same hashcode value.
As the question comes in your mind that equals() method is used to compare objects that they are having same value or not but why should we override the hashcode method ?

The answer to the question is for the hash technique based data structures like HashMap and HashTable.

How Hashcode works in java
How Hashcode works in java

As you can see in above diagram that every object is placed in Hash bucket depending on the hashcode they have. It is not necessary that every different object must have different hashcode. hashcode is used to narrow the search result. When we try to insert any key in HashMap first it checks whether any other object present with same hashcode and if yes then it checks for the equals() method. If two objects are same then HashMap will not add that key instead it will replace the old value by new one.

What will happen if I don’t override the hashcode method?
Ans : If the object does not implement hashcode() method and used as key then we will not get the object back as shown in below code.

Code without implementation of equals() and hashcode()

1
package com.G2.Collections;
2
 
3
import java.util.HashMap;
4
 
5
class Movie {
6
    private String name, actor;
7
 
8
    public String getName() {
9
        return name;
10
    }
11
 
12
    public void setName(String name) {
13
        this.name = name;
14
    }
15
 
16
    public String getActor() {
17
        return actor;
18
    }
19
 
20
    public void setActor(String actor) {
21
        this.actor = actor;
22
    }
23
 
24
    public int getReleaseYr() {
25
        return releaseYr;
26
    }
27
 
28
    public void setReleaseYr(int releaseYr) {
29
        this.releaseYr = releaseYr;
30
    }
31
 
32
    private int releaseYr;
33
}
34
 
35
public class HashMapDemo {
36
 
37
    public static void main(String[] args) {
38
 
39
        Movie m = new Movie();
40
        m.setActor("Akshay");
41
        m.setName("Thank You");
42
        m.setReleaseYr(2011);
43
 
44
        Movie m1 = new Movie();
45
        m1.setActor("Akshay");
46
        m1.setName("Khiladi");
47
        m1.setReleaseYr(1993);
48
 
49
        Movie m2 = new Movie();
50
        m2.setActor("Akshay");
51
        m2.setName("Taskvir");
52
        m2.setReleaseYr(2010);
53
 
54
        Movie m3 = new Movie();
55
        m3.setActor("Akshay");
56
        m3.setName("Taskvir");
57
        m3.setReleaseYr(2010);
58
 
59
        HashMap<Movie, String> map = new HashMap<Movie, String>();
60
        map.put(m, "ThankYou");
61
        map.put(m1, "Khiladi");
62
        map.put(m2, "Tasvir");
63
        map.put(m3, "Duplicate Tasvir");
64
 
65
        //Iterate over HashMap
66
        for (Movie mm : map.keySet()) {
67
            System.out.println(map.get(mm).toString());
68
        }
69
 
70
        Movie m4 = new Movie();
71
        m4.setActor("Akshay");
72
        m4.setName("Taskvir");
73
        m4.setReleaseYr(2010);
74
 
75
/* We are trying to retrieve m2, by creating object m4 with exact values as of m2, However Hashcode method is not implemented and that why we are not able to get Object m2 */
76
        if(map.get(m4) == null ){
77
            System.out.println("----------------");
78
            System.out.println("Object not found");
79
            System.out.println("----------------");
80
        }else{
81
            System.out.println(map.get(m4).toString());
82
        }
83
    }
84
}
Output:
Khiladi
Tasvir
ThankYou
Duplicate Tasvir
—————-
Object not found
—————-

As you can see in above program :

Duplicate objects are added in Hashmap as a key (Because we have not overided the hashcode and equals method)
We are not able to get back object from map (Because hashcode is not implemented)
Same program with equals and hashcode implementation:

1
package com.G2.Collections;
2
 
3
import java.util.HashMap;
4
 
5
class Movie {
6
    private String name, actor;
7
 
8
    @Override
9
    public boolean equals(Object o) {
10
        Movie m = (Movie) o;
11
        return m.actor.equals(this.actor) && m.name.equals(this.name) && m.releaseYr == this.releaseYr;
12
    }
13
 
14
    @Override
15
    public int hashCode() {
16
        return actor.hashCode() + name.hashCode() + releaseYr;
17
    }
18
 
19
    public String getName() {
20
        return name;
21
    }
22
 
23
    public void setName(String name) {
24
        this.name = name;
25
    }
26
 
27
    public String getActor() {
28
        return actor;
29
    }
30
 
31
    public void setActor(String actor) {
32
        this.actor = actor;
33
    }
34
 
35
    public int getReleaseYr() {
36
        return releaseYr;
37
    }
38
 
39
    public void setReleaseYr(int releaseYr) {
40
        this.releaseYr = releaseYr;
41
    }
42
 
43
    private int releaseYr;
44
}
45
 
46
public class HashMapDemo {
47
 
48
    public static void main(String[] args) {
49
 
50
        Movie m = new Movie();
51
        m.setActor("Akshay");
52
        m.setName("Thank You");
53
        m.setReleaseYr(2011);
54
 
55
        Movie m1 = new Movie();
56
        m1.setActor("Akshay");
57
        m1.setName("Khiladi");
58
        m1.setReleaseYr(1993);
59
 
60
        Movie m2 = new Movie();
61
        m2.setActor("Akshay");
62
        m2.setName("Taskvir");
63
        m2.setReleaseYr(2010);
64
 
65
        Movie m3 = new Movie();
66
        m3.setActor("Akshay");
67
        m3.setName("Taskvir");
68
        m3.setReleaseYr(2010);
69
 
70
        HashMap<Movie, String> map = new HashMap<Movie, String>();
71
        map.put(m, "ThankYou");
72
        map.put(m1, "Khiladi");
73
        map.put(m2, "Tasvir");
74
        map.put(m3, "Duplicate Tasvir");
75
 
76
        // Iterate over HashMap
77
        for (Movie mm : map.keySet()) {
78
            System.out.println(map.get(mm).toString());
79
        }
80
 
81
        Movie m4 = new Movie();
82
        m4.setActor("Akshay");
83
        m4.setName("Taskvir");
84
        m4.setReleaseYr(2010);
85
 
86
        if (map.get(m4) == null) {
87
            System.out.println("----------------");
88
            System.out.println("Object not found");
89
            System.out.println("----------------");
90
        } else {
91
            System.out.println("----------------");
92
            System.out.println(map.get(m4).toString());
93
            System.out.println("----------------");
94
        }
95
    }
96
}
Output:
Khiladi
Duplicate Tasvir
ThankYou
—————-
Duplicate Tasvir
—————-
As you can see :

Duplicate Keys are not added instead there values are replaced.
Now the object is retrieved from the Map.
Most common interview questions are “How HashMap works in java”, “How get and put method of HashMap work internally”. Here I am trying to explain internal functionality with an easy example. Rather than going through theory, we will start with example first, so that you will get better understanding and then we will see how get and put function work in java.
Lets take a very simple example. I have a Country class, we are going to use Country class object as key and its capital name(string) as value. Below example will help you to understand, how these key value pair will be stored in hashmap.
 
 
 
1. Country.java
01
package org.arpit.javapostsforlearning;
02
public class Country {
03
 
04
 String name;
05
 long population;
06
 
07
 public Country(String name, long population) {
08
  super();
09
  this.name = name;
10
  this.population = population;
11
 }
12
 public String getName() {
13
  return name;
14
 }
15
 public void setName(String name) {
16
  this.name = name;
17
 }
18
 public long getPopulation() {
19
  return population;
20
 }
21
 public void setPopulation(long population) {
22
  this.population = population;
23
 }
24
 
25
 // If length of name in country object is even then return 31(any random number) and if odd then return 95(any random number).
26
 // This is not a good practice to generate hashcode as below method but I am doing so to give better and easy understanding of hashmap.
27
 @Override
28
 public int hashCode() {
29
  if(this.name.length()%2==0)
30
   return 31;
31
  else
32
   return 95;
33
 }
34
 @Override
35
 public boolean equals(Object obj) {
36
 
37
  Country other = (Country) obj;
38
   if (name.equalsIgnoreCase((other.name)))
39
   return true;
40
  return false;
41
 }
42
 
43
}
If you want to understand more about hashcode and equals method of object, you may refer hashcode() and equals() method in java
2. HashMapStructure.java(main class)
01
import java.util.HashMap;
02
import java.util.Iterator;
03
   
04
public class HashMapStructure {
05
   
06
    /**
07
     * @author Arpit Mandliya
08
     */
09
    public static void main(String[] args) {
10
           
11
        Country india=new Country("India",1000);
12
        Country japan=new Country("Japan",10000);
13
           
14
        Country france=new Country("France",2000);
15
        Country russia=new Country("Russia",20000);
16
           
17
        HashMap<country,string> countryCapitalMap=new HashMap<country,string>();
18
        countryCapitalMap.put(india,"Delhi");
19
        countryCapitalMap.put(japan,"Tokyo");
20
        countryCapitalMap.put(france,"Paris");
21
        countryCapitalMap.put(russia,"Moscow");
22
           
23
        Iterator<country> countryCapitalIter=countryCapitalMap.keySet().iterator();//put debug point at this line
24
        while(countryCapitalIter.hasNext())
25
        {
26
            Country countryObj=countryCapitalIter.next();
27
            String capital=countryCapitalMap.get(countryObj);
28
            System.out.println(countryObj.getName()+"----"+capital);
29
            }
30
        }
31
   
32
   
33
}
34
</country></country,string></country,string>
Now put debug point at line 23 and right click on project->debug as-> java application. Program will stop execution at line 23 then right click on countryCapitalMap then select watch.You will be able to see structure as below.
 
HashMapStructure1
Now From above diagram, you can observe following points
There is an Entry[] array called table which has size 16.
This table stores Entry class’s object. HashMap class has a inner class called Entry.This Entry have key value as instance variable. Lets see structure of entry class Entry Structure.
1
static class Entry implements Map.Entry
2
{
3
        final K key;
4
        V value;
5
        Entry next;
6
        final int hash;
7
        ...//More code goes here
8
}
Whenever we try to put any key value pair in hashmap, Entry class object is instantiated for key value and that object will be stored in above mentioned Entry[](table). Now you must be wondering, where will above created Enrty object get stored(exact position in table). The answer  is, hash code is calculated for a key by calling Hascode() method. This hashcode is used to calculate index for above Entry[] table.
Now, If you see at array index 10 in above diagram, It has an Entry object named HashMap$Entry.
We have put 4 key-values in hashmap but it seems to have only 2!!!!This is because if two objects have same hashcode, they will be stored at same index. Now question arises how? It stores objects in a form of LinkedList(logically).
So how hashcode of above country key-value pairs are calculated.
1
Hashcode for Japan = 95 as its length is odd.
2
Hashcode for India =95 as its length is odd
3
HashCode for Russia=31 as its length is even.
4
HashCode for France=31 as its length is even.
Below diagram will explain LinkedList concept clearly.
 
HashMapStructure2
So now if you have good understanding of hashmap structure,Lets go through put and get method.
Put :
Lets see implementation of put method:
01
/**
02
  * Associates the specified value with the specified key in this map. If the
03
  * map previously contained a mapping for the key, the old value is
04
  * replaced.
05
  *
06
  * @param key
07
  *            key with which the specified value is to be associated
08
  * @param value
09
  *            value to be associated with the specified key
10
  * @return the previous value associated with <tt>key</tt>, or <tt>null</tt>
11
  *         if there was no mapping for <tt>key</tt>. (A <tt>null</tt> return
12
  *         can also indicate that the map previously associated
13
  *         <tt>null</tt> with <tt>key</tt>.)
14
  */
15
 public V put(K key, V value) {
16
  if (key == null)
17
   return putForNullKey(value);
18
  int hash = hash(key.hashCode());
19
  int i = indexFor(hash, table.length);
20
  for (Entry<k , V> e = table[i]; e != null; e = e.next) {
21
   Object k;
22
   if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {
23
    V oldValue = e.value;
24
    e.value = value;
25
    e.recordAccess(this);
26
    return oldValue;
27
   }
28
  }
29
 
30
  modCount++;
31
  addEntry(hash, key, value, i);
32
  return null;
33
 }
now lets understand above code step by step
Key object is checked for null. If key is null then it will be stored at table[0] because hashcode for null is always 0.
Key object’s hashcode() method is called and hash code is calculated. This hashcode is used to find index of array for storing Entry object. It may happen sometimes that, this hashcode function is poorly written so JDK designer has put another function called hash() which takes above calculated hash value as argument.If you want to learn more about hash() function, you can refer hash and indexFor method in hashmap.
indexFor(hash,table.length)  is used to calculate exact index in table array for storing the Entry object.
As we have seen in our example, if two key objects have same hashcode(which is known as collision) then it will be stored in form of linkedlist.So here, we will iterate through our linkedlist.
If there is no element present at that index which we have just calculated then it will directly put our Entry object at that index.
If There is element present at that index then it will iterate until it gets Entry->next as null.Then current Entry object become next node in that linkedlist
What if we are putting same key again, logically it should replace old value. Yes,it will do that.While iterating it will check key equality by calling equals() method(key.equals(k)), if this method returns true then it replaces value object with current Entry’s value object.
 Get:
Lets see implementation of get now:
01
/**
02
  * Returns the value to which the specified key is mapped, or {@code null}
03
  * if this map contains no mapping for the key.
04
  *
05
  * <p>
06
  * More formally, if this map contains a mapping from a key {@code k} to a
07
  * value {@code v} such that {@code (key==null ? k==null :
08
  * key.equals(k))}, then this method returns {@code v}; otherwise it returns
09
  * {@code null}. (There can be at most one such mapping.)
10
  *
11
  * </p><p>
12
  * A return value of {@code null} does not <i>necessarily</i> indicate that
13
  * the map contains no mapping for the key; it's also possible that the map
14
  * explicitly maps the key to {@code null}. The {@link #containsKey
15
  * containsKey} operation may be used to distinguish these two cases.
16
  *
17
  * @see #put(Object, Object)
18
  */
19
 public V get(Object key) {
20
  if (key == null)
21
   return getForNullKey();
22
  int hash = hash(key.hashCode());
23
  for (Entry<k , V> e = table[indexFor(hash, table.length)]; e != null; e = e.next) {
24
   Object k;
25
   if (e.hash == hash && ((k = e.key) == key || key.equals(k)))
26
    return e.value;
27
  }
28
  return null;
29
 }
As you got the understanding on put functionality of hashmap. So to understand get functionality is quite simple. If you pass any key to get value object from hashmap.
Key object is checked for null. If key is null then value of Object resides at table[0] will be returned.
Key object’s hashcode() method is called and hash code is calculated.
indexFor(hash,table.length)  is used to calculate exact index in table array using generated hashcode for getting the Entry object.
After getting index in table array, it will iterate through linkedlist and check for key equality by calling equals() method and if it returns true then it returns the value of Entry object else returns null.
Key points to Remeber:
HashMap has a inner class called Entry which stores key-value pairs.
Above Entry object is stored in Entry[ ](Array) called table
An index of table is logically known as bucket and it stores first element of linkedlist
Key object’s hashcode() is used to find bucket of that Entry object.
If two key object ‘s have same hashcode , they will go in same bucket of table array.
Key object ‘s equals() method is used to ensure uniqueness of key object.
Value object  ‘s equals() and hashcode() method is not used at all